/*
Copyright (c) 2024 Yu Wang Wu

Permission is hereby granted, free of charge, to any 
person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the 
Software without restriction, including without 
limitation the rights to use, copy, modify, merge, 
publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the 
Software is furnished to do so, subject to the 
following conditions:

The above copyright notice and this permission 
notice shall be included in all copies or 
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY 
OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND 
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS 
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT 
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE 
OR OTHER DEALINGS IN THE SOFTWARE.
*/

#ifndef ARDUINO_H
#define ARDUINO_H
    #include "Arduino.h"
#endif

#include <U8g2lib.h>

#ifndef WIRE_H
#define WIRE_H
    #include <Wire.h>
#endif

#define I2C_SDA         16
#define I2C_SCK         4

#define OLED_WIDTH      128
#define OLED_HEIGHT     64
#define OLED_ADR        0x3C

#define MENU_QUANTITY   3       // = NUMBER OF MENUS - 1

enum ctlMode { SERIAL_CONTROL, RC_CONTROL };
enum encoder { ENC1, ENC2, ENC3, ENC4 };

class Panel {
private:
    uint8_t currentMenu, maxMenu;
    U8G2_SSD1306_128X64_NONAME_F_HW_I2C display;

public:
    Panel() : currentMenu(0), maxMenu(MENU_QUANTITY), display(U8G2_R0, U8X8_PIN_NONE) {};
    void begin();

    // Display management
    void menuNext();
    void menuPrev();
    void displayUpdate(ctlMode opMode, std::string leftVel, std::string rightVel, std::string dxlRPM, std::string battLvl, 
                        std::string m1enc, std::string m2enc, std::string m3enc, std::string m4enc);
    void updateEncoders(std::string m1enc, std::string m2enc, std::string m3enc, std::string m4enc);
    void updateLV(std::string leftVel);
    void updateRV(std::string rightVel);
    void updateDXL(std::string dxlVal);
    void updateBatt(std::string battVal);
};

const uint8_t img_signal[] = {
  0x20, 0x10, 0x48, 0x48, 0x93, 0x24,
  0x93, 0x24, 0x48, 0x48, 0x20, 0x10
};

const uint8_t battery[]  = {
  0x3f, 0xff, 0xff, 0xe0,
  0x3f, 0xff, 0xe0, 0x30,
  0xff, 0xff, 0xe0, 0x28,
  0xff, 0xff, 0xf0, 0x28,
  0xff, 0xff, 0xf0, 0x28,
  0xff, 0xff, 0xf8, 0x28,
  0xff, 0xff, 0xf8, 0x28,
  0xff, 0xff, 0xfc, 0x28,
  0xff, 0xff, 0xfc, 0x28,
  0xff, 0xff, 0xfe, 0x28,
  0xff, 0xff, 0xfe, 0x38,
  0x3f, 0xff, 0xff, 0x30,
  0x3f, 0xff, 0xff, 0xe0
};

const uint8_t battery_warning[]  = {
  0b00111111, 0b11100111, 0b00111111, 0b11100000,
  0b00100000, 0b00001111, 0b10000000, 0b00100000,
  0b11100000, 0b00001111, 0b10000000, 0b00111000,
  0b11100000, 0b00001111, 0b10000000, 0b00111000,
  0b11100000, 0b00001111, 0b10000000, 0b00111000,
  0b11100000, 0b00001111, 0b10000000, 0b00111000,
  0b11100000, 0b00001111, 0b10000000, 0b00111000,
  0b11100000, 0b00000111, 0x00, 0b00111000,
  0b11100000, 0b00000111, 0x00, 0b00111000,
  0b11100000, 0x00, 0x00, 0b00111000,
  0b11100000, 0b00000111, 0x00, 0b00111000,
  0b00100000, 0b00000111, 0x00, 0b00100000,
  0b00111111, 0b11110111, 0b01111111, 0b11100000
};

const uint8_t usb_cable[]  = {
  0b00000011, 0xff, 0xf0, 0x00,
  0x0f, 0xff, 0xff, 0b11111000,
  0b00011111, 0xff, 0xf0, 0b00001000,
  0b00011111, 0xff, 0xf0, 0b00001000,
  0xff, 0b11100111, 0xf0, 0b11101000,
  0b00011100, 0b01011110, 0xf0, 0b00001000,
  0b00011100, 0x00, 0b01110000, 0b00001000,
  0b00011100, 0b01101110, 0xf0, 0b00001000,
  0xff, 0b11110011, 0xf0, 0b11101000,
  0b00011111, 0xff, 0xf0, 0b00001000,
  0b00011111, 0xff, 0xf0, 0b00001000,
  0x0f, 0xff, 0xff, 0b11111000,
  0b00000011, 0xff, 0xf0, 0x00
};

const uint8_t rc_symbol[] = {
  0b01001011, 0b10100100,
  0b10001011, 0b10100010,
  0b01000001, 0b00000100,
  0b00011111, 0b11110000,
  0b01111111, 0b11111100,
  0xff, 0xfe, 
  0xff, 0xfe, 
  0b11101110, 0b11101110,
  0b11000110, 0b11000110,
  0b11101110, 0b11101110,
  0xff, 0xfe, 
  0xff, 0xfe,
  0x7f, 0xfc
};

const uint8_t chip[]  = {
  0b00101010, 0b10100000,
  0x7f, 0xf0,
  0xff, 0xf8,
  0x7f, 0xf0,
  0xff, 0xf8,
  0x7f, 0xf0,
  0xff, 0xf8,
  0x7f, 0xf0,
  0xff, 0xf8,
  0x7f, 0xf0,
  0xff, 0xf8,
  0x7f, 0xf0,
  0b00101010, 0b10100000
};

const uint8_t question_mark[]  = {
  0b00111110, 0x00,
  0x7f, 0x00, 
  0xff, 0x80,
  0xf7, 0x80,
  0b11100011, 0x80,
  0x07, 0x80,
  0x0f, 0x00, 
  0b00011110, 0x00,
  0b00011100, 0x00,
  0b00011100, 0x00,
  0x00, 0x00,
  0b00011100, 0x00,
  0b00011100, 0x00
};

const uint8_t tick_mark[] = {
  0x00, 0x00,
  0x00, 0x00,
  0x01, 0x80,
  0x01, 0x80,
  0x03, 0x80,
  0x03, 0x00,
  0x07, 0x00,
  0x06, 0x00,
  0xce, 0x00,
  0xec, 0x00,
  0xfc, 0x00,
  0x78, 0x00,
  0x38, 0x00
};

const uint8_t robot_left[] = {
  0x01, 0x80,
  0xfd, 0x00,
  0xfd, 0x00, 
  0xfd, 0x00,
  0xff, 0x00,
  0xff, 0x00,
  0xff, 0x00,
  0xfd, 0x00,
  0xfd, 0x00,
  0xfd, 0x00,
  0x01, 0x00,
  0x01, 0x00,
  0x01, 0x00,
  0x11, 0x00,
  0x09, 0x00,
  0x05, 0x00,
  0x01, 0x00,
  0x1d, 0x00,
  0x01, 0x00,
  0x05, 0x00,
  0x09, 0x00,
  0x11, 0x00, 
  0x01, 0x00,
  0x01, 0x00,
  0x01, 0x00,
  0xfd, 0x00,
  0xfd, 0x00, 
  0xfd, 0x00,
  0xff, 0x00, 
  0xff, 0x00,
  0xff, 0x00,
  0xfd, 0x00,
  0xfd, 0x00,
  0xfd, 0x00, 
  0x01, 0x80
};

const uint8_t robot_right[] = {
  0xc0, 0x00,
  0x5f, 0x80,
  0x5f, 0x80,
  0x5f, 0x80,
  0x7f, 0x80,
  0x7f, 0x80,
  0x7f, 0x80,
  0x5f, 0x80, 
  0x5f, 0x80,
  0x5f, 0x80,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x40, 0x00,
  0x5f, 0x80,
  0x5f, 0x80,
  0x5f, 0x80,
  0x7f, 0x80,
  0x7f, 0x80,
  0x7f, 0x80,
  0x5f, 0x80, 
  0x5f, 0x80,
  0x5f, 0x80,
  0xc0, 0x00
};